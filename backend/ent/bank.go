// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/patza/app/ent/bank"
)

// Bank is the model entity for the Bank schema.
type Bank struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Bank holds the value of the "Bank" field.
	Bank string `json:"Bank,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BankQuery when eager-loading is set.
	Edges BankEdges `json:"edges"`
}

// BankEdges holds the relations/edges for other nodes in the graph.
type BankEdges struct {
	// Bill holds the value of the bill edge.
	Bill []*Bill
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BillOrErr returns the Bill value or an error if the edge
// was not loaded in eager-loading.
func (e BankEdges) BillOrErr() ([]*Bill, error) {
	if e.loadedTypes[0] {
		return e.Bill, nil
	}
	return nil, &NotLoadedError{edge: "bill"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bank) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Bank
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bank fields.
func (b *Bank) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bank.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Bank", values[0])
	} else if value.Valid {
		b.Bank = value.String
	}
	return nil
}

// QueryBill queries the bill edge of the Bank.
func (b *Bank) QueryBill() *BillQuery {
	return (&BankClient{config: b.config}).QueryBill(b)
}

// Update returns a builder for updating this Bank.
// Note that, you need to call Bank.Unwrap() before calling this method, if this Bank
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bank) Update() *BankUpdateOne {
	return (&BankClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Bank) Unwrap() *Bank {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bank is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bank) String() string {
	var builder strings.Builder
	builder.WriteString("Bank(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", Bank=")
	builder.WriteString(b.Bank)
	builder.WriteByte(')')
	return builder.String()
}

// Banks is a parsable slice of Bank.
type Banks []*Bank

func (b Banks) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
