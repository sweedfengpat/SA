// Code generated by entc, DO NOT EDIT.

package confirmation

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/patza/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Adddate applies equality check predicate on the "adddate" field. It's identical to AdddateEQ.
func Adddate(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdddate), v))
	})
}

// Bookingstart applies equality check predicate on the "bookingstart" field. It's identical to BookingstartEQ.
func Bookingstart(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBookingstart), v))
	})
}

// Bookingend applies equality check predicate on the "bookingend" field. It's identical to BookingendEQ.
func Bookingend(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBookingend), v))
	})
}

// Hourstime applies equality check predicate on the "hourstime" field. It's identical to HourstimeEQ.
func Hourstime(v int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHourstime), v))
	})
}

// AdddateEQ applies the EQ predicate on the "adddate" field.
func AdddateEQ(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdddate), v))
	})
}

// AdddateNEQ applies the NEQ predicate on the "adddate" field.
func AdddateNEQ(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdddate), v))
	})
}

// AdddateIn applies the In predicate on the "adddate" field.
func AdddateIn(vs ...time.Time) predicate.Confirmation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Confirmation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdddate), v...))
	})
}

// AdddateNotIn applies the NotIn predicate on the "adddate" field.
func AdddateNotIn(vs ...time.Time) predicate.Confirmation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Confirmation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdddate), v...))
	})
}

// AdddateGT applies the GT predicate on the "adddate" field.
func AdddateGT(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdddate), v))
	})
}

// AdddateGTE applies the GTE predicate on the "adddate" field.
func AdddateGTE(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdddate), v))
	})
}

// AdddateLT applies the LT predicate on the "adddate" field.
func AdddateLT(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdddate), v))
	})
}

// AdddateLTE applies the LTE predicate on the "adddate" field.
func AdddateLTE(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdddate), v))
	})
}

// BookingstartEQ applies the EQ predicate on the "bookingstart" field.
func BookingstartEQ(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBookingstart), v))
	})
}

// BookingstartNEQ applies the NEQ predicate on the "bookingstart" field.
func BookingstartNEQ(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBookingstart), v))
	})
}

// BookingstartIn applies the In predicate on the "bookingstart" field.
func BookingstartIn(vs ...time.Time) predicate.Confirmation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Confirmation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBookingstart), v...))
	})
}

// BookingstartNotIn applies the NotIn predicate on the "bookingstart" field.
func BookingstartNotIn(vs ...time.Time) predicate.Confirmation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Confirmation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBookingstart), v...))
	})
}

// BookingstartGT applies the GT predicate on the "bookingstart" field.
func BookingstartGT(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBookingstart), v))
	})
}

// BookingstartGTE applies the GTE predicate on the "bookingstart" field.
func BookingstartGTE(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBookingstart), v))
	})
}

// BookingstartLT applies the LT predicate on the "bookingstart" field.
func BookingstartLT(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBookingstart), v))
	})
}

// BookingstartLTE applies the LTE predicate on the "bookingstart" field.
func BookingstartLTE(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBookingstart), v))
	})
}

// BookingendEQ applies the EQ predicate on the "bookingend" field.
func BookingendEQ(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBookingend), v))
	})
}

// BookingendNEQ applies the NEQ predicate on the "bookingend" field.
func BookingendNEQ(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBookingend), v))
	})
}

// BookingendIn applies the In predicate on the "bookingend" field.
func BookingendIn(vs ...time.Time) predicate.Confirmation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Confirmation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBookingend), v...))
	})
}

// BookingendNotIn applies the NotIn predicate on the "bookingend" field.
func BookingendNotIn(vs ...time.Time) predicate.Confirmation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Confirmation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBookingend), v...))
	})
}

// BookingendGT applies the GT predicate on the "bookingend" field.
func BookingendGT(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBookingend), v))
	})
}

// BookingendGTE applies the GTE predicate on the "bookingend" field.
func BookingendGTE(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBookingend), v))
	})
}

// BookingendLT applies the LT predicate on the "bookingend" field.
func BookingendLT(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBookingend), v))
	})
}

// BookingendLTE applies the LTE predicate on the "bookingend" field.
func BookingendLTE(v time.Time) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBookingend), v))
	})
}

// HourstimeEQ applies the EQ predicate on the "hourstime" field.
func HourstimeEQ(v int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHourstime), v))
	})
}

// HourstimeNEQ applies the NEQ predicate on the "hourstime" field.
func HourstimeNEQ(v int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHourstime), v))
	})
}

// HourstimeIn applies the In predicate on the "hourstime" field.
func HourstimeIn(vs ...int) predicate.Confirmation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Confirmation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHourstime), v...))
	})
}

// HourstimeNotIn applies the NotIn predicate on the "hourstime" field.
func HourstimeNotIn(vs ...int) predicate.Confirmation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Confirmation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHourstime), v...))
	})
}

// HourstimeGT applies the GT predicate on the "hourstime" field.
func HourstimeGT(v int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHourstime), v))
	})
}

// HourstimeGTE applies the GTE predicate on the "hourstime" field.
func HourstimeGTE(v int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHourstime), v))
	})
}

// HourstimeLT applies the LT predicate on the "hourstime" field.
func HourstimeLT(v int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHourstime), v))
	})
}

// HourstimeLTE applies the LTE predicate on the "hourstime" field.
func HourstimeLTE(v int) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHourstime), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBill applies the HasEdge predicate on the "bill" edge.
func HasBill() predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BillTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillTable, BillColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillWith applies the HasEdge predicate on the "bill" edge with a given conditions (other predicates).
func HasBillWith(preds ...predicate.Bill) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BillInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillTable, BillColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Confirmation) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Confirmation) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Confirmation) predicate.Confirmation {
	return predicate.Confirmation(func(s *sql.Selector) {
		p(s.Not())
	})
}
