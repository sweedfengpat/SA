// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/patza/app/ent/bank"
	"github.com/patza/app/ent/bill"
	"github.com/patza/app/ent/confirmation"
	"github.com/patza/app/ent/user"
)

// Bill is the model entity for the Bill schema.
type Bill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PayNumber holds the value of the "Pay_number" field.
	PayNumber int `json:"Pay_number,omitempty"`
	// PayTotal holds the value of the "Pay_total" field.
	PayTotal int `json:"Pay_total,omitempty"`
	// PayTime holds the value of the "Pay_time" field.
	PayTime time.Time `json:"Pay_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillQuery when eager-loading is set.
	Edges           BillEdges `json:"edges"`
	bank_id         *int
	confirmation_id *int
	owner_id        *int
}

// BillEdges holds the relations/edges for other nodes in the graph.
type BillEdges struct {
	// Bank holds the value of the bank edge.
	Bank *Bank
	// Confirmation holds the value of the confirmation edge.
	Confirmation *Confirmation
	// Owner holds the value of the owner edge.
	Owner *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BankOrErr returns the Bank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) BankOrErr() (*Bank, error) {
	if e.loadedTypes[0] {
		if e.Bank == nil {
			// The edge bank was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: bank.Label}
		}
		return e.Bank, nil
	}
	return nil, &NotLoadedError{edge: "bank"}
}

// ConfirmationOrErr returns the Confirmation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) ConfirmationOrErr() (*Confirmation, error) {
	if e.loadedTypes[1] {
		if e.Confirmation == nil {
			// The edge confirmation was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: confirmation.Label}
		}
		return e.Confirmation, nil
	}
	return nil, &NotLoadedError{edge: "confirmation"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bill) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // Pay_number
		&sql.NullInt64{}, // Pay_total
		&sql.NullTime{},  // Pay_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Bill) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // bank_id
		&sql.NullInt64{}, // confirmation_id
		&sql.NullInt64{}, // owner_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bill fields.
func (b *Bill) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bill.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Pay_number", values[0])
	} else if value.Valid {
		b.PayNumber = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Pay_total", values[1])
	} else if value.Valid {
		b.PayTotal = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field Pay_time", values[2])
	} else if value.Valid {
		b.PayTime = value.Time
	}
	values = values[3:]
	if len(values) == len(bill.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field bank_id", value)
		} else if value.Valid {
			b.bank_id = new(int)
			*b.bank_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field confirmation_id", value)
		} else if value.Valid {
			b.confirmation_id = new(int)
			*b.confirmation_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field owner_id", value)
		} else if value.Valid {
			b.owner_id = new(int)
			*b.owner_id = int(value.Int64)
		}
	}
	return nil
}

// QueryBank queries the bank edge of the Bill.
func (b *Bill) QueryBank() *BankQuery {
	return (&BillClient{config: b.config}).QueryBank(b)
}

// QueryConfirmation queries the confirmation edge of the Bill.
func (b *Bill) QueryConfirmation() *ConfirmationQuery {
	return (&BillClient{config: b.config}).QueryConfirmation(b)
}

// QueryOwner queries the owner edge of the Bill.
func (b *Bill) QueryOwner() *UserQuery {
	return (&BillClient{config: b.config}).QueryOwner(b)
}

// Update returns a builder for updating this Bill.
// Note that, you need to call Bill.Unwrap() before calling this method, if this Bill
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bill) Update() *BillUpdateOne {
	return (&BillClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Bill) Unwrap() *Bill {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bill is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bill) String() string {
	var builder strings.Builder
	builder.WriteString("Bill(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", Pay_number=")
	builder.WriteString(fmt.Sprintf("%v", b.PayNumber))
	builder.WriteString(", Pay_total=")
	builder.WriteString(fmt.Sprintf("%v", b.PayTotal))
	builder.WriteString(", Pay_time=")
	builder.WriteString(b.PayTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Bills is a parsable slice of Bill.
type Bills []*Bill

func (b Bills) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
