// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/patza/app/ent/bill"
	"github.com/patza/app/ent/confirmation"
	"github.com/patza/app/ent/user"
)

// ConfirmationCreate is the builder for creating a Confirmation entity.
type ConfirmationCreate struct {
	config
	mutation *ConfirmationMutation
	hooks    []Hook
}

// SetAdddate sets the adddate field.
func (cc *ConfirmationCreate) SetAdddate(t time.Time) *ConfirmationCreate {
	cc.mutation.SetAdddate(t)
	return cc
}

// SetBookingstart sets the bookingstart field.
func (cc *ConfirmationCreate) SetBookingstart(t time.Time) *ConfirmationCreate {
	cc.mutation.SetBookingstart(t)
	return cc
}

// SetBookingend sets the bookingend field.
func (cc *ConfirmationCreate) SetBookingend(t time.Time) *ConfirmationCreate {
	cc.mutation.SetBookingend(t)
	return cc
}

// SetHourstime sets the hourstime field.
func (cc *ConfirmationCreate) SetHourstime(i int) *ConfirmationCreate {
	cc.mutation.SetHourstime(i)
	return cc
}

// SetOwnerID sets the owner edge to User by id.
func (cc *ConfirmationCreate) SetOwnerID(id int) *ConfirmationCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (cc *ConfirmationCreate) SetNillableOwnerID(id *int) *ConfirmationCreate {
	if id != nil {
		cc = cc.SetOwnerID(*id)
	}
	return cc
}

// SetOwner sets the owner edge to User.
func (cc *ConfirmationCreate) SetOwner(u *User) *ConfirmationCreate {
	return cc.SetOwnerID(u.ID)
}

// AddBillIDs adds the bill edge to Bill by ids.
func (cc *ConfirmationCreate) AddBillIDs(ids ...int) *ConfirmationCreate {
	cc.mutation.AddBillIDs(ids...)
	return cc
}

// AddBill adds the bill edges to Bill.
func (cc *ConfirmationCreate) AddBill(b ...*Bill) *ConfirmationCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cc.AddBillIDs(ids...)
}

// Mutation returns the ConfirmationMutation object of the builder.
func (cc *ConfirmationCreate) Mutation() *ConfirmationMutation {
	return cc.mutation
}

// Save creates the Confirmation in the database.
func (cc *ConfirmationCreate) Save(ctx context.Context) (*Confirmation, error) {
	if _, ok := cc.mutation.Adddate(); !ok {
		return nil, &ValidationError{Name: "adddate", err: errors.New("ent: missing required field \"adddate\"")}
	}
	if _, ok := cc.mutation.Bookingstart(); !ok {
		return nil, &ValidationError{Name: "bookingstart", err: errors.New("ent: missing required field \"bookingstart\"")}
	}
	if _, ok := cc.mutation.Bookingend(); !ok {
		return nil, &ValidationError{Name: "bookingend", err: errors.New("ent: missing required field \"bookingend\"")}
	}
	if _, ok := cc.mutation.Hourstime(); !ok {
		return nil, &ValidationError{Name: "hourstime", err: errors.New("ent: missing required field \"hourstime\"")}
	}
	var (
		err  error
		node *Confirmation
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfirmationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConfirmationCreate) SaveX(ctx context.Context) *Confirmation {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *ConfirmationCreate) sqlSave(ctx context.Context) (*Confirmation, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *ConfirmationCreate) createSpec() (*Confirmation, *sqlgraph.CreateSpec) {
	var (
		c     = &Confirmation{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: confirmation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: confirmation.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Adddate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: confirmation.FieldAdddate,
		})
		c.Adddate = value
	}
	if value, ok := cc.mutation.Bookingstart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: confirmation.FieldBookingstart,
		})
		c.Bookingstart = value
	}
	if value, ok := cc.mutation.Bookingend(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: confirmation.FieldBookingend,
		})
		c.Bookingend = value
	}
	if value, ok := cc.mutation.Hourstime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: confirmation.FieldHourstime,
		})
		c.Hourstime = value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   confirmation.OwnerTable,
			Columns: []string{confirmation.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.BillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   confirmation.BillTable,
			Columns: []string{confirmation.BillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
