// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/patza/app/ent/bank"
	"github.com/patza/app/ent/bill"
	"github.com/patza/app/ent/confirmation"
	"github.com/patza/app/ent/user"
)

// BillCreate is the builder for creating a Bill entity.
type BillCreate struct {
	config
	mutation *BillMutation
	hooks    []Hook
}

// SetPayNumber sets the Pay_number field.
func (bc *BillCreate) SetPayNumber(i int) *BillCreate {
	bc.mutation.SetPayNumber(i)
	return bc
}

// SetPayTotal sets the Pay_total field.
func (bc *BillCreate) SetPayTotal(i int) *BillCreate {
	bc.mutation.SetPayTotal(i)
	return bc
}

// SetPayTime sets the Pay_time field.
func (bc *BillCreate) SetPayTime(t time.Time) *BillCreate {
	bc.mutation.SetPayTime(t)
	return bc
}

// SetBankID sets the bank edge to Bank by id.
func (bc *BillCreate) SetBankID(id int) *BillCreate {
	bc.mutation.SetBankID(id)
	return bc
}

// SetNillableBankID sets the bank edge to Bank by id if the given value is not nil.
func (bc *BillCreate) SetNillableBankID(id *int) *BillCreate {
	if id != nil {
		bc = bc.SetBankID(*id)
	}
	return bc
}

// SetBank sets the bank edge to Bank.
func (bc *BillCreate) SetBank(b *Bank) *BillCreate {
	return bc.SetBankID(b.ID)
}

// SetConfirmationID sets the confirmation edge to Confirmation by id.
func (bc *BillCreate) SetConfirmationID(id int) *BillCreate {
	bc.mutation.SetConfirmationID(id)
	return bc
}

// SetNillableConfirmationID sets the confirmation edge to Confirmation by id if the given value is not nil.
func (bc *BillCreate) SetNillableConfirmationID(id *int) *BillCreate {
	if id != nil {
		bc = bc.SetConfirmationID(*id)
	}
	return bc
}

// SetConfirmation sets the confirmation edge to Confirmation.
func (bc *BillCreate) SetConfirmation(c *Confirmation) *BillCreate {
	return bc.SetConfirmationID(c.ID)
}

// SetOwnerID sets the owner edge to User by id.
func (bc *BillCreate) SetOwnerID(id int) *BillCreate {
	bc.mutation.SetOwnerID(id)
	return bc
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (bc *BillCreate) SetNillableOwnerID(id *int) *BillCreate {
	if id != nil {
		bc = bc.SetOwnerID(*id)
	}
	return bc
}

// SetOwner sets the owner edge to User.
func (bc *BillCreate) SetOwner(u *User) *BillCreate {
	return bc.SetOwnerID(u.ID)
}

// Mutation returns the BillMutation object of the builder.
func (bc *BillCreate) Mutation() *BillMutation {
	return bc.mutation
}

// Save creates the Bill in the database.
func (bc *BillCreate) Save(ctx context.Context) (*Bill, error) {
	if _, ok := bc.mutation.PayNumber(); !ok {
		return nil, &ValidationError{Name: "Pay_number", err: errors.New("ent: missing required field \"Pay_number\"")}
	}
	if v, ok := bc.mutation.PayNumber(); ok {
		if err := bill.PayNumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "Pay_number", err: fmt.Errorf("ent: validator failed for field \"Pay_number\": %w", err)}
		}
	}
	if _, ok := bc.mutation.PayTotal(); !ok {
		return nil, &ValidationError{Name: "Pay_total", err: errors.New("ent: missing required field \"Pay_total\"")}
	}
	if v, ok := bc.mutation.PayTotal(); ok {
		if err := bill.PayTotalValidator(v); err != nil {
			return nil, &ValidationError{Name: "Pay_total", err: fmt.Errorf("ent: validator failed for field \"Pay_total\": %w", err)}
		}
	}
	if _, ok := bc.mutation.PayTime(); !ok {
		return nil, &ValidationError{Name: "Pay_time", err: errors.New("ent: missing required field \"Pay_time\"")}
	}
	var (
		err  error
		node *Bill
	)
	if len(bc.hooks) == 0 {
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BillCreate) SaveX(ctx context.Context) *Bill {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bc *BillCreate) sqlSave(ctx context.Context) (*Bill, error) {
	b, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	b.ID = int(id)
	return b, nil
}

func (bc *BillCreate) createSpec() (*Bill, *sqlgraph.CreateSpec) {
	var (
		b     = &Bill{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bill.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bill.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.PayNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldPayNumber,
		})
		b.PayNumber = value
	}
	if value, ok := bc.mutation.PayTotal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldPayTotal,
		})
		b.PayTotal = value
	}
	if value, ok := bc.mutation.PayTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bill.FieldPayTime,
		})
		b.PayTime = value
	}
	if nodes := bc.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BankTable,
			Columns: []string{bill.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ConfirmationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.ConfirmationTable,
			Columns: []string{bill.ConfirmationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: confirmation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.OwnerTable,
			Columns: []string{bill.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return b, _spec
}
