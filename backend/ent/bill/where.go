// Code generated by entc, DO NOT EDIT.

package bill

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/patza/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PayNumber applies equality check predicate on the "Pay_number" field. It's identical to PayNumberEQ.
func PayNumber(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayNumber), v))
	})
}

// PayTotal applies equality check predicate on the "Pay_total" field. It's identical to PayTotalEQ.
func PayTotal(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayTotal), v))
	})
}

// PayTime applies equality check predicate on the "Pay_time" field. It's identical to PayTimeEQ.
func PayTime(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayTime), v))
	})
}

// PayNumberEQ applies the EQ predicate on the "Pay_number" field.
func PayNumberEQ(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayNumber), v))
	})
}

// PayNumberNEQ applies the NEQ predicate on the "Pay_number" field.
func PayNumberNEQ(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayNumber), v))
	})
}

// PayNumberIn applies the In predicate on the "Pay_number" field.
func PayNumberIn(vs ...int) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayNumber), v...))
	})
}

// PayNumberNotIn applies the NotIn predicate on the "Pay_number" field.
func PayNumberNotIn(vs ...int) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayNumber), v...))
	})
}

// PayNumberGT applies the GT predicate on the "Pay_number" field.
func PayNumberGT(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayNumber), v))
	})
}

// PayNumberGTE applies the GTE predicate on the "Pay_number" field.
func PayNumberGTE(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayNumber), v))
	})
}

// PayNumberLT applies the LT predicate on the "Pay_number" field.
func PayNumberLT(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayNumber), v))
	})
}

// PayNumberLTE applies the LTE predicate on the "Pay_number" field.
func PayNumberLTE(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayNumber), v))
	})
}

// PayTotalEQ applies the EQ predicate on the "Pay_total" field.
func PayTotalEQ(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayTotal), v))
	})
}

// PayTotalNEQ applies the NEQ predicate on the "Pay_total" field.
func PayTotalNEQ(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayTotal), v))
	})
}

// PayTotalIn applies the In predicate on the "Pay_total" field.
func PayTotalIn(vs ...int) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayTotal), v...))
	})
}

// PayTotalNotIn applies the NotIn predicate on the "Pay_total" field.
func PayTotalNotIn(vs ...int) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayTotal), v...))
	})
}

// PayTotalGT applies the GT predicate on the "Pay_total" field.
func PayTotalGT(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayTotal), v))
	})
}

// PayTotalGTE applies the GTE predicate on the "Pay_total" field.
func PayTotalGTE(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayTotal), v))
	})
}

// PayTotalLT applies the LT predicate on the "Pay_total" field.
func PayTotalLT(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayTotal), v))
	})
}

// PayTotalLTE applies the LTE predicate on the "Pay_total" field.
func PayTotalLTE(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayTotal), v))
	})
}

// PayTimeEQ applies the EQ predicate on the "Pay_time" field.
func PayTimeEQ(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayTime), v))
	})
}

// PayTimeNEQ applies the NEQ predicate on the "Pay_time" field.
func PayTimeNEQ(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayTime), v))
	})
}

// PayTimeIn applies the In predicate on the "Pay_time" field.
func PayTimeIn(vs ...time.Time) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayTime), v...))
	})
}

// PayTimeNotIn applies the NotIn predicate on the "Pay_time" field.
func PayTimeNotIn(vs ...time.Time) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayTime), v...))
	})
}

// PayTimeGT applies the GT predicate on the "Pay_time" field.
func PayTimeGT(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayTime), v))
	})
}

// PayTimeGTE applies the GTE predicate on the "Pay_time" field.
func PayTimeGTE(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayTime), v))
	})
}

// PayTimeLT applies the LT predicate on the "Pay_time" field.
func PayTimeLT(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayTime), v))
	})
}

// PayTimeLTE applies the LTE predicate on the "Pay_time" field.
func PayTimeLTE(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayTime), v))
	})
}

// HasBank applies the HasEdge predicate on the "bank" edge.
func HasBank() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BankTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBankWith applies the HasEdge predicate on the "bank" edge with a given conditions (other predicates).
func HasBankWith(preds ...predicate.Bank) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BankInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConfirmation applies the HasEdge predicate on the "confirmation" edge.
func HasConfirmation() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConfirmationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConfirmationTable, ConfirmationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConfirmationWith applies the HasEdge predicate on the "confirmation" edge with a given conditions (other predicates).
func HasConfirmationWith(preds ...predicate.Confirmation) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConfirmationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConfirmationTable, ConfirmationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		p(s.Not())
	})
}
